{"ast":null,"code":"import wordBank from \"./wordle-bank.txt\";\nexport const boardDefault = [[\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"]];\nexport const generateWordSet = async () => {\n  let wordSet;\n  let todaysWord;\n  await fetch(wordBank).then(response => response.text()).then(result => {\n    const wordArr = result.split(\"\\n\");\n    todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n    wordSet = new Set(wordArr);\n  });\n  return {\n    wordSet,\n    todaysWord\n  };\n};","map":{"version":3,"sources":["/Users/krystal/Documents/wordle/src/Words.js"],"names":["wordBank","boardDefault","generateWordSet","wordSet","todaysWord","fetch","then","response","text","result","wordArr","split","Math","floor","random","length","Set"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAC1B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAD0B,EAE1B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAF0B,EAG1B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAH0B,EAI1B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAJ0B,EAK1B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAL0B,EAM1B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAN0B,CAArB;AASP,OAAO,MAAMC,eAAe,GAAG,YAAY;AACzC,MAAIC,OAAJ;AACA,MAAIC,UAAJ;AACA,QAAMC,KAAK,CAACL,QAAD,CAAL,CACHM,IADG,CACGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADhB,EAEHF,IAFG,CAEGG,MAAD,IAAY;AAChB,UAAMC,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAa,IAAb,CAAhB;AACAP,IAAAA,UAAU,GAAGM,OAAO,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,OAAO,CAACK,MAAnC,CAAD,CAApB;AACAZ,IAAAA,OAAO,GAAG,IAAIa,GAAJ,CAAQN,OAAR,CAAV;AACD,GANG,CAAN;AAOA,SAAO;AAAEP,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAP;AACD,CAXM","sourcesContent":["import wordBank from \"./wordle-bank.txt\";\n\nexport const boardDefault = [\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n];\n\nexport const generateWordSet = async () => {\n  let wordSet;\n  let todaysWord;\n  await fetch(wordBank)\n    .then((response) => response.text())\n    .then((result) => {\n      const wordArr = result.split(\"\\n\");\n      todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n      wordSet = new Set(wordArr);\n    });\n  return { wordSet, todaysWord };\n};"]},"metadata":{},"sourceType":"module"}