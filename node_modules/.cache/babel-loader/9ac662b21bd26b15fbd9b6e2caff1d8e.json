{"ast":null,"code":"var _jsxFileName = \"/Users/krystal/Documents/wordle/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefault, generateWordSet } from \"./Words\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport GameOver from \"./components/GameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\nfunction App() {\n  _s();\n\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letter: 0\n  });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  useEffect(() => {\n    generateWordSet().then(words => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onEnter = () => {\n    if (currAttempt.letter !== 5) return;\n    let currWord = \"\";\n\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letter: 0\n      });\n    } else {\n      alert(\"Word not found\");\n    }\n\n    if (currWord === correctWord) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n      return;\n    }\n\n    console.log(currAttempt);\n\n    if (currAttempt.attempt === 5) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n      return;\n    }\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letter: currAttempt.letter - 1\n    });\n  };\n\n  const onSelectLetter = key => {\n    if (currAttempt.letter > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WORDLE \\uD83D\\uDCDA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"HINT: If all your letters turn GREEN \\u2705, fill in the rest of the blanks with the right Wordle for a message \\uD83D\\uDE1C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        correctWord,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8cGGr4UWJFFMgKVInzeNz+c3Ehk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/krystal/Documents/wordle/src/App.js"],"names":["Board","Keyboard","boardDefault","generateWordSet","React","useState","createContext","useEffect","GameOver","AppContext","App","board","setBoard","currAttempt","setCurrAttempt","attempt","letter","wordSet","setWordSet","Set","correctWord","setCorrectWord","disabledLetters","setDisabledLetters","gameOver","setGameOver","guessedWord","then","words","todaysWord","onEnter","currWord","i","has","toLowerCase","alert","console","log","onDelete","newBoard","onSelectLetter","key"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefault, generateWordSet } from \"./Words\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport GameOver from \"./components/GameOver\";\n\nexport const AppContext = createContext();\n\nfunction App() {\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({ attempt: 0, letter: 0 });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false,\n  });\n\n  useEffect(() => {\n    generateWordSet().then((words) => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onEnter = () => {\n    if (currAttempt.letter !== 5) return;\n\n    let currWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letter: 0 });\n    } else {\n      alert(\"Word not found\");\n    }\n\n    if (currWord === correctWord) {\n      setGameOver({ gameOver: true, guessedWord: true });\n      return;\n    }\n    console.log(currAttempt);\n    if (currAttempt.attempt === 5) {\n      setGameOver({ gameOver: true, guessedWord: false });\n      return;\n    }\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, letter: currAttempt.letter - 1 });\n  };\n\n  const onSelectLetter = (key) => {\n    if (currAttempt.letter > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>WORDLE 📚</h1>\n      </nav>\n      <h3>HINT: If all your letters turn GREEN ✅, fill in the rest of the blanks with the right Wordle for a message 😜</h3>\n      <AppContext.Provider\n        value={{\n          board,\n          setBoard,\n          currAttempt,\n          setCurrAttempt,\n          correctWord,\n          onSelectLetter,\n          onDelete,\n          onEnter,\n          setDisabledLetters,\n          disabledLetters,\n          gameOver,\n        }}\n      >\n        <div className=\"game\">\n          <Board />\n          {gameOver.gameOver ? <GameOver /> : <Keyboard />}\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}